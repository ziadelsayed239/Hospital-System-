
    <div id="mySidebar" class="sidebar">
      <a href="javascript:void(0)" class="closebtn" onclick="closeNav()">×</a>
      <a href="#">About</a>
      <a href="#">Logout</a>
      <a href="#">Q&A</a>
      <a href="#">Support</a>
      <!-- Add more links as needed -->
    </div>

    <div id="main">
      <button class="openbtn" onclick="toggleNav()">☰</button>
      <div class="container">
        <!-- Hero Section -->
        <div class="hero-section">
          <h1>Welcome, patient</h1>
          <p>Your health is our priority</p>
        </div>

        <!-- Appointments Section -->
       
        <!-- Add Appointment Modal -->
 
  
        <h2 class="mt-5 toggle-btn">Appointments ▽</h2>
        
        
        <div class="content">

          <div class="table-responsive">
        
  <table class="table table-bordered" id="appointmentTable">
    <thead>
      <tr>
        <th>ID</th>
        <th>Date and Time</th>
        <th>Wait Time</th>
        <th>Room Number</th>
        <th>Doctor</th>
        <th>Department</th>
        <th>Type</th>
      </tr>
      <tr>
        <!-- Search inputs will be added dynamically -->
      </tr>
    </thead>
    
    
    <tbody>
      <tr>
        <td>ID</td>
        <td>10:00 AM</td>
        <td>15 mins</td>
        <td>102</td>
        <td><a href="#" data-toggle="modal" data-target="#doctorModal">Dr. Smith</a></td>
        <td>Cardiology</td>
        <td>Medical Examination</td>
      </tr>
      <tr>
        <td>ID</td>
        <td>10:00 AM</td>
        <td>15 mins</td>
        <td>102</td>
        <td><a href="#" data-toggle="modal" data-target="#doctorModal">Dr. Smith</a></td>
        <td>Cardiology</td>
        <td>Medical Examination</td>
      </tr>
      <tr>
        <td>ID</td>
        <td>10:00 AM</td>
        <td>15 mins</td>
        <td>102</td>
        <td><a href="#" data-toggle="modal" data-target="#doctorModal">Dr. Smith</a></td>
        <td>Cardiology</td>
        <td>Medical Examination</td>
      </tr>
      <tr>
        <td>ID</td>
        <td>10:00 AM</td>
        <td>15 mins</td>
        <td>102</td>
        <td><a href="#" data-toggle="modal" data-target="#doctorModal">Dr. Smith</a></td>
        <td>Cardiology</td>
        <td>Medical Examination</td>
      </tr>
      <tr>
        <td>ID</td>
        <td>10:00 AM</td>
        <td>15 mins</td>
        <td>102</td>
        <td><a href="#" data-toggle="modal" data-target="#doctorModal">Dr. Smith</a></td>
        <td>Cardiology</td>
        <td>Medical Examination</td>
      </tr>
      <tr>
        <td>ID</td>
        <td>10:00 AM</td>
        <td>15 mins</td>
        <td>102</td>
        <td><a href="#" data-toggle="modal" data-target="#doctorModal">Dr. Smith</a></td>
        <td>Cardiology</td>
        <td>Medical Examination</td>
      </tr>
      <tr>
        <td>ID</td>
        <td>10:00 AM</td>
        <td>15 mins</td>
        <td>102</td>
        <td><a href="#" data-toggle="modal" data-target="#doctorModal">Dr. Smith</a></td>
        <td>Dermatology</td>
        <td>Follow-up</td>
      </tr>
      <tr>
        <td>ID</td>
        <td>10:00 AM</td>
        <td>15 mins</td>
        <td>102</td>
        <td><a href="#" data-toggle="modal" data-target="#doctorModal">Dr. Smith</a></td>
        <td>Cardiology</td>
        <td>Medical Examination</td>
      </tr>
      <tr>
        <td>ID</td>
        <td>8:00 AM</td>
        <td>10 mins</td>
        <td>101</td>
        <td><a href="#" data-toggle="modal" data-target="#doctorModal">Dr. Smith</a></td>
        <td>Cardiology</td>
        <td>Follow-up</td>
      </tr>
      <tr>
        <td>ID</td>
        <td>10:00 AM</td>
        <td>15 mins</td>
        <td>105</td>
        <td><a href="#" data-toggle="modal" data-target="#doctorModal">Dr. Smith</a></td>
        <td>Cardiology</td>
        <td>Medical Examination</td>
      </tr><tr>
        <td>ID</td>
        <td>10:00 AM</td>
        <td>15 mins</td>
        <td>00</td>
        <td><a href="#" data-toggle="modal" data-target="#doctorModal">Dr. Smith</a></td>
        <td>test</td>
        <td>Medical Examination</td>
      </tr>
    </tbody>
  </table>
  <!-- Pagination -->
  <nav aria-label="Page navigation example">
    <ul class="pagination justify-content-center" id="pagination">
      <!-- Pagination items will be generated dynamically -->
    </ul>
  </nav>

        </div>
      </div>

        <!-- Medical Records Section -->

        <h2 class="mt-5 toggle-btn">Medical Records ▽</h2>
        
        <div class="content">
          <div class="table-responsive">
          <table class="table table-bordered" id="systemUsersTable">
            <thead>
              <tr>
                <th>ID</th>
                <th>last update</th>
                <th>Patient Name</th>
                <th>Notes</th>
                <th>Prescription</th>
                 <th>record</th>
                <th>Actions</th>
              </tr>
              <tr>
                <!-- Search inputs will be added dynamically -->
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>2023-12-01</td>
                <td>Annual Check-up: Normal</td>
                <td>Dr. Jones</td>
                <td>No issues found</td>
                <td>No issues found</td>
                <td>Vitamin D Supplements</td>
                <td><a href="#" data-toggle="modal" data-target="#MedicalRecordModal">view/edit</a></td>
              </tr>
              <tr>
                <td>2023-12-15</td>
                <td>Dermatitis Treatment</td>
                <td>Dr. Adams</td>
                <td>Improving condition</td>
                 <td>Improving condition</td>
                <td>Topical Cream</td>
                <td><a href="#" data-toggle="modal" data-target="#MedicalRecordModal">view/edit</a></td>
              </tr>
              <!-- Add more rows as needed -->
            </tbody>
          </table>
          <nav aria-label="Page navigation example">
            <ul class="pagination justify-content-center" id="paginationUsers">
              <!-- Pagination items will be generated dynamically -->
            </ul>
          </nav>
        </div>
      </div>
    </div>

    <!-- Doctor Modal -->
    <div
      class="modal fade"
      id="doctorModal"
      tabindex="-1"
      role="dialog"
      aria-labelledby="doctorModalLabel"
      aria-hidden="true"
    >
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="doctorModalLabel">Doctor Details</h5>
            <button
              type="button"
              class="close"
              data-dismiss="modal"
              aria-label="Close"
            >
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body">
            <!-- Doctor details go here -->
            <p>Name: Dr. Smith</p>
            <p>Specialization: Cardiology</p>
            <p>Experience: 15 years</p>
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-dismiss="modal"
            >
              Close
            </button>
        
          </div>
        </div>
      </div>
    </div>
     <!-- MedicalRecordModal -->
    <div
      class="modal fade"
      id="MedicalRecordModal"
      tabindex="-1"
      role="dialog"
      aria-labelledby="MedicalRecordModalLabel"
      aria-hidden="true"
    >
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="MedicalRecordModalLabel">MedicalRecordMDetails</h5>
            <button
              type="button"
              class="close"
              data-dismiss="modal"
              aria-label="Close"
            >
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body">
            <!-- MedicalRecordMdetails go here -->
            <p>Name: </p>
            <p>Record: Cardiology</p>
            <p>Prescription: Vitamin D</p>
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-dismiss="modal"
            >
              Close
            </button>
            <button
            type="button"
            class="btn btn-primary"
            data-toggle="modal" data-target="#addPatientModal"
          >
            Edit
          </button>
          </div>
        </div>
      </div>
    </div>
    <!-- Add Medical Record Modal -->
<div class="modal fade" id="addPatientModal" tabindex="-1" role="dialog" aria-labelledby="addPatientModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-sm" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addPatientModalLabel">Add New Patient</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <form>
          <div class="form-group">
            <label for="Notes">Notes</label>
            <input type="text" class="form-control" id="Notes">
          </div>
          <div class="form-group">
            <label for="Prescription">Prescription</label>
            <input type="text" class="form-control" id="Prescription">
          </div>
          <div class="form-group">
            <label for="Record">Record</label>
            <input type="text" class="form-control" id="Record">
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" data-dismiss="modal">Save</button>
      </div>
    </div>
  </div>
</div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/fuse.js/6.4.6/fuse.min.js"></script>
    <script>
      function toggleNav() {
        var sidebar = document.getElementById('mySidebar');
        var main = document.getElementById('main');
        if (sidebar.style.width === '250px' || sidebar.style.width === '100%') {
          sidebar.style.width = '0';
          main.style.marginLeft = '0';
        } else {
          sidebar.style.width = window.innerWidth <= 768 ? '100%' : '250px';
          main.style.marginLeft = window.innerWidth <= 768 ? '0' : '250px';
        }
      }

      function closeNav() {
        document.getElementById('mySidebar').style.width = '0';
        document.getElementById('main').style.marginLeft = '0';
      }

      $(document).ready(function () {
        $('.toggle-btn').click(function () {
          var content = $(this).next('.content');
          content.toggleClass('visible');
          $(this).text(
            content.hasClass('visible')
              ? $(this).text().replace('▽', '△')
              : $(this).text().replace('△', '▽')
          );
        });
      });
      function backdropFirstModal() {
    $('#addAppointmentModal').modal('toggle');
    setTimeout(function() {
      $('#addAppointmentModal').modal('show').addClass('backdroped-modal');
      //  $('#AddSystemUserModal').modal('show').addClass('backdroped-modal');
    }, 500);
  }

  $('#addDoctorModal').on('hidden.bs.modal', function () {
    $('#addAppointmentModal').removeClass('backdroped-modal');
    // $('#AddSystemUserModal').removeClass('backdroped-modal');
  });



  function setupTablePaginationAndSearch(tableSelector, paginationSelector) {
  document.addEventListener('DOMContentLoaded', function() {
    var rowsPerPage = 5;
    var table = document.querySelector(tableSelector);
    var rows = Array.from(table.querySelectorAll('tbody tr'));
    var searchFields = [];

    // Collect search fields dynamically based on the table headers
    table.querySelectorAll('thead th').forEach((th) => {
      searchFields.push(th.innerText.trim().toLowerCase());
    });

    // Create an array of row data for Fuse.js
    var rowData = rows.map(function(row) {
      return {
        element: row,
        ...Array.from(row.children).reduce((acc, cell, index) => {
          acc[searchFields[index]] = cell.innerText;
          return acc;
        }, {})
      };
    });

    // Fuse.js options
    var options = {
      includeScore: true,
      keys: searchFields,
      threshold: 0.3
    };

    var fuse = new Fuse(rowData, options);

    function showPage(page, filteredRows = rowData) {
      var start = (page - 1) * rowsPerPage;
      var end = start + rowsPerPage;

      // Hide all rows
      rows.forEach(row => row.style.display = 'none');

      // Show only the rows for the current page
      filteredRows.slice(start, end).forEach(row => row.element.style.display = '');
    }

    function searchTable(changedField) {
      var results = rowData;

      searchFields.forEach((field) => {
        var searchValue = document.getElementById(field + 'Search').value.trim().toLowerCase();
        if (searchValue) {
          results = fuse.search(searchValue).map(result => result.item);
        }
      });

      showPage(1, results);
      updatePagination(results);
    }

    function updatePagination(filteredRows = rowData) {
      var totalPages = Math.ceil(filteredRows.length / rowsPerPage);
      var pagination = document.querySelector(paginationSelector);
      pagination.innerHTML = '';

      for (var i = 1; i <= totalPages; i++) {
        var pageItem = document.createElement('li');
        pageItem.classList.add('page-item');
        pageItem.setAttribute('data-page', i);
        pageItem.innerHTML = `<a class="page-link" href="#">${i}</a>`;

        pageItem.addEventListener('click', function(e) {
          e.preventDefault();
          var page = parseInt(this.getAttribute('data-page'));
          showPage(page, filteredRows);

          Array.from(pagination.children).forEach(link => link.classList.remove('active'));
          this.classList.add('active');
        });

        pagination.appendChild(pageItem);
      }

      if (pagination.children.length > 0) {
        pagination.children[0].classList.add('active');
      }
    }

    function debounce(func, delay) {
      let timeout;
      return function() {
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(this, arguments), delay);
      };
    }

    const debouncedSearch = debounce(searchTable, 300);

    // Create search inputs dynamically
    searchFields.forEach((field) => {
      var searchInput = document.createElement('input');
      searchInput.type = 'text';
      searchInput.id = field + 'Search';
      searchInput.placeholder = `Search ${field.charAt(0).toUpperCase() + field.slice(1)}`;
      
      searchInput.addEventListener('input', function() {
        // Clear other search fields when one is typed into
        searchFields.forEach((f) => {
          if (f !== field) {
            document.getElementById(f + 'Search').value = '';
          }
        });

        debouncedSearch(field);
      });

      // Create a th for the search input
      var th = document.createElement('th');
      th.appendChild(searchInput);
      table.querySelector('thead tr:nth-child(2)').appendChild(th);
    });

    // Initialize pagination and show the first page
    showPage(1);
    updatePagination();
  });
}

// Usage: Call the function with your table selector and pagination selector
setupTablePaginationAndSearch('#appointmentTable', '#pagination');
setupTablePaginationAndSearch('#systemUsersTable', '#paginationUsers');

// sort filter
document.addEventListener('DOMContentLoaded', function() {
    const table = document.getElementById('appointmentTable');
    const headers = table.querySelectorAll('th:not(:last-child)'); // Exclude last column (Type)
    const rows = Array.from(table.querySelectorAll('tbody tr')); // Store all rows
    let currentSortColumn = null; // Track the current sorted column
    let currentSortDirection = 'none'; // Track sort direction

    // Function to sort the table
    function sortTable(columnIndex, direction) {
      const sortedRows = [...rows]; // Create a copy to avoid mutating the original rows array

      sortedRows.sort((a, b) => {
        
        const aText = a.children[columnIndex].innerText.toLowerCase();
        const bText = b.children[columnIndex].innerText.toLowerCase();
        // console.log(aText)

        if (direction === 'asc') {
          return aText.localeCompare(bText);
        } else if (direction === 'desc') {
          return bText.localeCompare(aText);
        }
        return 0; // No sorting
      });

      // Update the table body with sorted rows
      const tbody = table.querySelector('tbody');
      tbody.innerHTML = '';
      sortedRows.forEach(row => tbody.appendChild(row));
    }

    // Click event for sorting
    headers.forEach((header, index) => {
      // Create a span for the sorting indicator
      const indicatorSpan = document.createElement('span');
      indicatorSpan.style.marginLeft = '5px'; // Add some space between text and indicator
      header.appendChild(indicatorSpan);

      header.addEventListener('click', function() {
        // Determine new sort direction
        let newSortDirection;
        if (currentSortColumn === index) {
          if (currentSortDirection === 'asc') {
            newSortDirection = 'desc';
          } else if (currentSortDirection === 'desc') {
            newSortDirection = 'none';
          } else {
            newSortDirection = 'asc';
          }
        } else {
          newSortDirection = 'asc'; // Reset to ascending if a new column is clicked
        }

        // Clear previous indicators
        headers.forEach((h) => {
          const span = h.querySelector('span');
          if (span) {
            span.textContent = ''; // Remove previous indicators
          }
        });

        // Set the new indicator
        if (newSortDirection === 'asc') {
          indicatorSpan.textContent = '△'; // Ascending indicator
        } else if (newSortDirection === 'desc') {
          indicatorSpan.textContent = '▽'; // Descending indicator
        }

        // Sort the table based on the new direction
        sortTable(index, newSortDirection);

        // Update current sort column and direction
        currentSortColumn = index;
        currentSortDirection = newSortDirection;
      });
    });
  });

</script>